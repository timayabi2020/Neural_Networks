{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Each point is length, width and type (0 or 1)\n",
    "data = [[3, 1.5, 1],\n",
    "       [2, 1, 0],\n",
    "       [4, 1.5, 1],\n",
    "       [3, 1, 0],\n",
    "       [3.5, .5, 1],\n",
    "       [2, .5, 0],\n",
    "       [5.5, 1, 1],\n",
    "       [1, 1, 0]]\n",
    "mystery_point = [4.5, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 1.5, 1]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#network\n",
    "w1 = np.random.randn()\n",
    "w2 = np.random.randn()\n",
    "b = np.random.randn()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Activation function\n",
    "def sigmoid(x):\n",
    "    return 1/(1+np.exp(-x))\n",
    "\n",
    "#Derivative of the sigmoid\n",
    "def sigmoid_p(x):\n",
    "    return sigmoid(x)* (1 - sigmoid(x)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x19457c42548>]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "T = np.linspace(-6, 6, 100)\n",
    "#Y = sigmoid(T)\n",
    "plt.plot(T, sigmoid(T), c='r')\n",
    "plt.plot(T, sigmoid_p(T), c='b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Scatter data\n",
    "plt.axis([0,6,0,6])\n",
    "plt.grid()\n",
    "for i in range(len(data)):\n",
    "    point = data[i]\n",
    "    color='r'\n",
    "    if point[2] == 0:\n",
    "        color = 'b'\n",
    "    plt.scatter(point[0], point[1], c=color)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x194598133c8>]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#training loop\n",
    "w1 = np.random.randn()\n",
    "w2 = np.random.randn()\n",
    "b = np.random.randn()\n",
    "learning_rate = 0.2\n",
    "costs=[]\n",
    "\n",
    "for i in range(50000):\n",
    "    \n",
    "    ri = np.random.randint(len(data))\n",
    "    point = data[ri]\n",
    "    z = point[0] * w1 + point[1] * w2 + b\n",
    "    pred = sigmoid(z)\n",
    "    \n",
    "    target = point[2]\n",
    "    cost = np.square(pred - target)\n",
    "    \n",
    "        \n",
    "    #Derivative of the cost with respect to the prediction i.e apply power rule\n",
    "    dcost_pred = 2 * (pred - target)\n",
    "    \n",
    "    #Derivative of the prediction with respect to z i.e sigmoid prime\n",
    "    dpred_dz = sigmoid_p(z)\n",
    "    \n",
    "    dz_dw1 = point[0]\n",
    "    dz_dw2 = point[1]\n",
    "    dz_db = 1\n",
    "    \n",
    "    #Apply chain rule for each cost i.e partial derivatives\n",
    "    dcost_dz = dcost_pred * dpred_dz\n",
    "    dcost_dw1 = dcost_dz * dz_dw1\n",
    "    dcost_dw2 = dcost_dz * dz_dw2\n",
    "    dcost_db = dcost_dz * dz_db\n",
    "    \n",
    "    w1 = w1 - learning_rate * dcost_dw1\n",
    "    w2 = w2 - learning_rate * dcost_dw2\n",
    "    b = b - learning_rate * dcost_db\n",
    "    \n",
    "    if(i % 100 == 0):\n",
    "        cost_sum = 0\n",
    "        for j in range(len(data)):\n",
    "            p= data[ri]\n",
    "            z = p[0] * w1 + p[1] * w2 + b\n",
    "            pred = sigmoid(z)\n",
    "    \n",
    "            target = point[2]\n",
    "            cost_sum += np.square(pred - target)\n",
    "        costs.append(cost_sum/len(data))\n",
    "            \n",
    "plt.plot(costs)\n",
    "        \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 1.5, 1]\n",
      "pred: 0.715737923402547 \n",
      "[2, 1, 0]\n",
      "pred: 0.0005218975765259231 \n",
      "[4, 1.5, 1]\n",
      "pred: 0.9996162681895736 \n",
      "[3, 1, 0]\n",
      "pred: 0.35074826090010125 \n",
      "[3.5, 0.5, 1]\n",
      "pred: 0.7885090556663944 \n",
      "[2, 0.5, 0]\n",
      "pred: 0.00011202388826895346 \n",
      "[5.5, 1, 1]\n",
      "pred: 0.9999999462360025 \n",
      "[1, 1, 0]\n",
      "pred: 5.047093719490896e-07 \n"
     ]
    }
   ],
   "source": [
    "#print all the predictions for each point\n",
    "\n",
    "for i in range(len(data)):\n",
    "    point = data[i]\n",
    "    print(point)\n",
    "    z = point[0] * w1 + point[1] * w2 + b\n",
    "    pred = sigmoid(z)\n",
    "    print( \"pred: {} \".format(pred))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9999443791237445"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Get the predicted output of mystery point\n",
    "z = mystery_point[0] * w1 + mystery_point[1] * w2 + b\n",
    "pred = sigmoid(z)\n",
    "pred\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.system(\"say hi\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.system(\"ln -s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "from win32com.client import Dispatch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "speak = Dispatch(\"SAPI.SpVoice\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#speak.Speak(\"Good evening Loot. How was your day?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "def which_value(length, width):\n",
    "    z = length * w1 + width * w2 + b\n",
    "    pred = sigmoid(z)\n",
    "    if pred < .5:\n",
    "        speak.Speak(\"The point is blue in color\")\n",
    "    else:\n",
    "        speak.Speak(\"The point is red in color\")\n",
    "            \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "which_value(4.5,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
